OBS don't forget to check your current used ports and update these with new (unused) ones!

---

$ cd /var/www/
$ mkdir microservice-sap && cd microservice-sap
$ git clone https://github.com/dancostinel/docker-empty-symfony6-nginx-php8.2-mysql8-phpmyadmin.git .
$ rm -rf .git
# created repo:  https://github.com/dancostinel/microservice-sap.git
$ git init
$ git remote add origin https://github.com/dancostinel/microservice-sap.git
# review .gitignore file and ignore whatever files and dirs you'd want
$ git add .
$ git commit -m "init"
$ git push origin master
$ vi docker/docker-compose.yaml
version: '3'
volumes:
    mysql_data:
services:
    microservice-sap-nginx-service:
        build:
            context: .
            dockerfile: ./nginx/Dockerfile
        container_name: microservice-sap-nginx-container
        volumes:
            - ./../:/var/www/microservice-sap/
        ports: ['8001:80']
        networks:
            - microservice-sap-network
    microservice-sap-php-service:
        build:
            context: .
            dockerfile: ./php/Dockerfile
        container_name: microservice-sap-php-container
        ports: ['9001:9000']
        volumes:
            - ./../:/var/www/microservice-sap/
            - ./../vendor:/var/www/microservice-sap/vendor
        networks:
            - microservice-sap-network
    microservice-sap-mysql-service:
        image: mysql
        container_name: microservice-sap-mysql-container
        command: ['--character-set-server=utf8mb4', '--collation-server=utf8mb4_unicode_ci', '--default-authentication-plugin=caching_sha2_password']  #--authentication_policy
        environment:
            MYSQL_ROOT_PASSWORD: root
        ports: ['3306:3306']
        volumes:
            - ./mysql:/var/lib/mysql
        networks:
            - microservice-sap-network
    microservice-sap-phpmyadmin-service:
        image: phpmyadmin/phpmyadmin:latest
        container_name: microservice-sap-phpmyadmin-container
        environment:
            PMA_HOST: microservice-sap-mysql-service
            PMA_USER: root
            PMA_PASSWORD: root
        ports: ['7000:80']
        depends_on:
            - microservice-sap-mysql-service
        volumes:
            - ./phpmyadmin/:/var/www/microservice-sap/docker/phpmyadmin/
        networks:
            - microservice-sap-network
networks:
    microservice-sap-network:
        driver: bridge

$ vi docker/nginx/default.conf
server {
    listen 80;
    server_name localhost;
    root /var/www/microservice-sap/public;

    location / {
        try_files $uri /index.php$is_args$args;
    }

    location ~ ^/index\.php(/|$) {
        fastcgi_pass microservice-sap-php-container:9000;
        fastcgi_split_path_info ^(.+\.php)(/.*)$;

        include fastcgi_params;
        fastcgi_param SCRIPT_FILENAME $realpath_root$fastcgi_script_name;
        fastcgi_param DOCUMENT_ROOT $realpath_root;
        internal;
    }

    location ~ \.php$ {
        return 404;
    }

    error_log  /var/log/nginx/error.log;
    access_log /var/log/nginx/access.log;
}

$ vi docker/nginx/Dockerfile
FROM nginx:latest
RUN apt-get update && apt-get install apt-file -y && apt-file update && apt-get install vim -y
COPY ./nginx/default.conf /etc/nginx/conf.d/

$ vi docker/php/Dockerfile
FROM php:8.2.0-fpm
RUN apt-get update && apt-get install apt-file -y && apt-file update && apt-get install vim -y --no-install-recommends \
        git \
        zlib1g-dev \
        libxml2-dev \
        libzip-dev \
        unzip \
    && docker-php-ext-install \
        zip \
        intl \
        mysqli \
        pdo pdo_mysql

RUN curl -sS https://getcomposer.org/installer | php && mv composer.phar /usr/local/bin/composer
WORKDIR /var/www/microservice-sap/

$ vi .env
DATABASE_URL="mysql://root:root@microservice-sap-mysql-container:3306/microservice-sap-db"

$ docker compose -f docker/docker-compose.yaml up -d --build   # --force-recreate
$ docker compose -f docker/docker-compose.yaml down

$ docker exec -it microservice-sap-php-container bash
# composer install
# php bin/console doctrine:database:create

---

CONNECT TWO CONTAINERS FROM A NETWORK:
connect microservice-br-rabbitmq-container with microservice-sap-rabbitmq-container

STEP1 create the common network by typing:
$ docker network create -d bridge microservice-app-network
$ docker network ls
IF THIS COMMON NETWORK IS NOT CREATED LIKE SO, AN ERROR WILL BE THROWN WHEN TRYING TO up -d ONE OF THE CONTAINERS FROM EITHER APP
network microservice-app-network declared as external, but could not be found
THIS MEANS THAT THE network IS NOT YET CREATED, BUT IT'S USED. SO FIRST CREATE THE NETWORK MANUALLY, THEN USE IT

STEP2
cd microservice-br/
docker compose -f docker/docker-compose.yaml up -d

cd microservice-sap/
docker compose -f docker/docker-compose.yaml up -d

STEP3
### microservice-br/docker/docker-compose.yaml
services:
    //...
    microservice-br-php-service:
        //...
        networks:
            - microservice-br-network
            - microservice-app-network
    microservice-br-rabbitmq-service:
        //...
        networks:
            - microservice-br-network
            - microservice-app-network
networks:
    //...
    microservice-app-network:
        driver: bridge
        external: true

STEP4
### microservice-sap/docker/docker-compose.yaml
services:
    //...
    microservice-sap-php-service:
        //...
        networks:
            - microservice-sap-network
            - microservice-app-network
    microservice-sap-rabbitmq-service:
        //...
        networks:
            - microservice-sap-network
            - microservice-app-network
networks:
    //...
    microservice-app-network:
        driver: bridge
        external: true

---

TO INSTALL RabbitMQ and redis:
$ vi docker/php/Dockerfile
#...
RUN apt-get update ...
        #...
        librabbitmq-dev \
    && docker-php-ext-install \
        #...
        pcntl \
        sockets

RUN pecl install amqp-2.1.1
RUN docker-php-ext-enable amqp
RUN pecl install redis
RUN docker-php-ext-enable redis

OR IF THE docker-php-ext-install commands from above doesn't work then replace them with:
RUN docker-php-ext-install pcntl
RUN docker-php-ext-install sockets

$ docker compose -f docker/docker-compose.yaml up -d --build

$ docker exec -it microservice-sap-php-container bash
$ composer require php-amqplib/rabbitmq-bundle

### config/packages/old_sound_rabbit_mq.yaml
old_sound_rabbit_mq:
    connections:
        default:
            url: '%env(RABBITMQ_URL)%'
    producers:
        test-producer:
            connection: default
            exchange_options: { name: 'testing-exchange', type: direct }
            class: App\RabbitMQ\Producer\TestProducer
    consumers:
        test:
            connection: default
            exchange_options: { name: 'testing-exchange', type: direct }
            queue_options: { name: 'testing-queue' }
            callback: App\RabbitMQ\Consumer\TestConsumer
            enable_logger: true

### .env
### this is for sap! pay attention to ports defined in docker-compose.yaml file
RABBITMQ_URL=amqp://guest:guest@microservice-sap-rabbit-container:5673

### docker exec -it microservice-sap-php-container bash
php bin/console rabbitmq:setup-fabric

---
